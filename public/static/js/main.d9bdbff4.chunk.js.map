{"version":3,"sources":["components/Auth/Auth.tsx","services/socketClient.ts","imgs/user.svg","imgs/next.svg","components/Main/Sidebar/SidebarItem.tsx","imgs/addContact.svg","imgs/logout.svg","components/Main/Sidebar/SidebarHeader.tsx","components/Main/Sidebar/Sidebar.tsx","components/Main/Chat/ChatHeader.tsx","components/Main/Chat/SentMessageBubble.tsx","components/Main/Chat/RecivedMessageBubble.tsx","components/Main/Chat/ChatBody.tsx","imgs/sendChatButton.svg","components/Main/Chat/ChatBox.tsx","components/Main/Chat/Chat.tsx","services/server.ts","components/AddContacts/AddContactForm.tsx","imgs/HomeIcon.svg","components/AddContacts/AddContactHeader.tsx","components/AddContacts/AddContacts.tsx","components/Main/Main.tsx","components/Auth/SignIn/SignInForm.tsx","components/Auth/SignIn/SignIn.tsx","components/Auth/SignUp/SignUpForm.tsx","components/Auth/SignUp/SignUp.tsx","components/ProtectedRoute.tsx","App.tsx","index.tsx"],"names":["Auth","socket","id","to","className","enterChat","width","height","contactName","display","justifyContent","margin","UserPhoto","backgroundColor","borderRadius","marginLeft","mainDivStyle","alignItems","gridTemplateColumns","color","fontSize","textDecoration","cursor","newMessageAlertStyle","borderWidth","mainDivSelctedStyle","SidebarItem","info","name","username","lastOnline","numberOfNewMessages","selectedChatState","selectedContactInfo","setselectedContactInfo","selectChat","senderUsername","emit","style","onClick","src","UserImg","EnterChat","undefined","logout","addContact","SidebarHeader","selectAddContactState","selectAddContact","setSelectAddContact","history","useHistory","AddContactImg","logoutImg","localStorage","removeItem","push","sideBarWrapper","flexDirection","sideBarItems","overflowY","Sidebar","contactsInfo","contacts","setContacts","map","contact","i","nameDivStyle","textAlign","mainWrapperStyle","gridTemplateRows","ChatHeader","messageMetaDataStyle","messageReadStatus","beforeSpanStyle","afterSpanStyle","sentMessageStyle","position","alignSelf","wordWrap","SentMessageBubble","message","contactUsername","timeSent","Date","useState","isRead","timeRead","messageMetadata","setMessageMetadata","useEffect","callback","response","messagesRead","on","text","title","getFullYear","getMonth","getUTCDate","getHours","getMinutes","recivedMessageStyle","recivedBeforeStyle","recivedAfterStyle","RecivedMessageBubble","ChatBody","chat","element","document","getElementById","scrollTo","behavior","top","scrollHeight","Messages","msg","key","sendButtonStyle","justifySelf","inputBoxStyle","appearance","padding","resize","border","ChatBox","textInputState","textInput","setTextInput","SendButton","reciverUsername","onChange","event","target","value","rows","chatStyle","Chat","chatState","chats","setChats","recivedMessage","user","index","findUserChatsIndex","modifiedArray","onMessageRecived","length","findUserChats","baseUrl","process","signInRequest","password","a","axios","post","status","setItem","data","token","signUpRequest","email","checkIfEmailIsAvaliable","get","checkIfUsernameIsAvaliable","addNewContact","getItem","put","headers","getUserChats","getUserContacts","isJwtTokenValid","marginTop","AddContactForm","Boolean","isLoading","setIsLoading","responseMessage","setResponseMessage","sendNewContactRequest","preventDefault","formData","FormData","currentTarget","String","type","onSubmit","required","placeholder","AddContactHeader","HomeIcon","mainWrapper","AddContacts","mainDivNoChatStyle","mainDivNoContactsStyle","mainWrapperWithChatStyle","Main","getDataFromServer","getContacts","getChats","validateToken","disconnect","jwtTokenIsValid","url","io","extraHeaders","Authorization","connect","initiateSocket","SignInForm","error","sendAuthRequest","SignIn","SignUpForm","isRegisterd","setIsRegisterd","setError","checkUsername","checkEmail","checkPassword","SignUp","PrivateRoute","Component","component","routeProps","render","props","App","dotenv","config","ProtectedRoute","path","exact","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d9bdbff4.chunk.js","sourcesContent":["import './Auth.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Auth() {\r\n\r\n\treturn (\r\n\t\t<div id=\"authDiv\">\r\n\t\t\t<div>\r\n\t\t\t\t<p id=\"authText\">Welcome to this app which is definitely {<br />} not a WhatsApp clone</p>\r\n\t\t\t\t<div id=\"authButtonsDiv\">\r\n\t\t\t\t\t<Link to=\"/Auth/Signin\" className=\"authButton\">Sign in</Link>\r\n\t\t\t\t\t<Link to=\"/Auth/Signup\" className=\"authButton\">Sign up</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\n\r\nexport default Auth","import { io, Socket } from 'socket.io-client'\r\nimport Message from '../interfaces/MessageInterface'\r\n\r\nlet socket: Socket\r\n\r\nconst initiateSocket = (): void => {\r\n\tif(!socket){\r\n\t\tconst url =`${process.env.REACT_APP_SERVER_URL}`\r\n\t\tsocket = io(url, {\r\n\t\t\textraHeaders: {\r\n\t\t\t\tAuthorization: `Bearer ${localStorage.getItem('token')}`,\r\n\t\t\t},\r\n\t\t})\r\n\t\tsocket.emit('userIsOnline')\r\n\t}\r\n\tsocket.connect()\r\n}\r\n\r\nconst disconnectSocket = (): void => {\r\n\tsocket.disconnect()\r\n}\r\n\r\nconst sendMessage = (text: string, reciverUsername: string): void => {\r\n\tsocket.emit('sendMessage', { text, reciverUsername })\r\n}\r\n\r\n\r\nconst checkIfMessageWasSent = (callback: any): void => {\r\n\tsocket.on('sendMessage', callback)\r\n}\r\n\r\nconst onMessageRecived = (callback: any): void => {\r\n\tsocket.on('reciveMessage', callback)\r\n}\r\n\r\nconst markMessagesAsRead = (senderUsername: string): void => {\r\n\tsocket.emit('markMessagesAsRead', {senderUsername})\r\n}\r\n\r\nconst onMessageRead = (callback: any): void => {\r\n\tsocket.on('markMessagesAsRead', callback)\r\n}\r\n\r\n\r\nexport {initiateSocket,disconnectSocket, sendMessage, checkIfMessageWasSent, onMessageRecived, markMessagesAsRead, onMessageRead}\r\n","export default __webpack_public_path__ + \"static/media/user.bf0f18cf.svg\";","export default __webpack_public_path__ + \"static/media/next.77f44fcc.svg\";","import CSS from 'csstype'\r\nimport UserImg from '../../../imgs/user.svg'\r\nimport EnterChat from '../../../imgs/next.svg'\r\nimport User from '../../../interfaces/UserInterface'\r\nimport { markMessagesAsRead } from '../../../services/socketClient'\r\nfunction SidebarItem({ info: { name, username, lastOnline, numberOfNewMessages }, selectedChatState: {selectedContactInfo, setselectedContactInfo} }: props): JSX.Element {\r\n\r\n\tconst selectChat = () => {\r\n\t\tsetselectedContactInfo({name, username, lastOnline, numberOfNewMessages: 0})\r\n\t\tmarkMessagesAsRead(username)\r\n\t}\r\n\r\n\tif(selectedContactInfo.username === username)\r\n\t\treturn (\r\n\t\t\t<div id={username} style={mainDivSelctedStyle} onClick={selectChat}>\r\n\t\t\t\t<div style={UserPhoto}>\r\n\t\t\t\t\t<img src={UserImg}></img>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style={contactName}>{name}</div>\r\n\t\t\t\t<img style={enterChat} src={EnterChat}></img>\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t\r\n\treturn (\r\n\t\t<div id={username} style={mainDivStyle} onClick={selectChat}>\r\n\t\t\t<div style={UserPhoto}>\r\n\t\t\t\t<img src={UserImg}></img>\r\n\t\t\t</div>\r\n\t\t\t<div style={contactName}>{name}</div>\r\n\t\t\t<p style={newMessageAlertStyle}>{numberOfNewMessages !== undefined? numberOfNewMessages : null}</p>\r\n\t\t\t<img style={enterChat} src={EnterChat}></img>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst enterChat: CSS.Properties = {\r\n\twidth: '15px',\r\n\theight: '15px',\r\n}\r\n\r\nconst contactName: CSS.Properties = {\r\n\tdisplay: 'flex',\r\n\tjustifyContent: 'left',\r\n\tmargin: '25px'\r\n}\r\n\r\n\r\nconst UserPhoto: CSS.Properties = {\r\n\theight: '50px',\r\n\twidth: '50px',\r\n\tbackgroundColor: 'white',\r\n\tborderRadius: '50%',\r\n\tmarginLeft: '5px'\r\n}\r\n\r\n\r\n\r\nconst mainDivStyle: CSS.Properties = {\r\n\tdisplay: 'grid',\r\n\talignItems: 'center',\r\n\tgridTemplateColumns: '2fr 10fr 2fr 1fr',\r\n\tbackgroundColor: '#476072',\r\n\tcolor: 'white',\r\n\tfontSize: '25px',\r\n\theight: '125px',\r\n\ttextDecoration: 'none',\r\n\tcursor: 'pointer',\r\n}\r\n\r\nconst newMessageAlertStyle: CSS.Properties = {\r\n\tbackgroundColor: '#74bec1',\r\n\tborderWidth: '0px 0px',\r\n\tborderRadius: '20px'\r\n\r\n}\r\nconst mainDivSelctedStyle: CSS.Properties = {\r\n\tdisplay: 'grid',\r\n\talignItems: 'center',\r\n\tgridTemplateColumns: '2fr 10fr 1fr',\r\n\tbackgroundColor: '#002E47',\r\n\tcolor: 'white',\r\n\tfontSize: '25px',\r\n\theight: '125px',\r\n\ttextDecoration: 'none',\r\n\tcursor: 'pointer',\r\n}\r\n\r\n\r\n\r\ninterface props {\r\n\tinfo: User\r\n\tselectedChatState : {\r\n\t\tselectedContactInfo: User,\r\n\t\tsetselectedContactInfo: React.Dispatch<React.SetStateAction<User>>\r\n\t}\r\n}\r\n\r\nexport default SidebarItem","export default __webpack_public_path__ + \"static/media/addContact.2572b8d7.svg\";","export default __webpack_public_path__ + \"static/media/logout.c2b409d7.svg\";","import UserImg from '../../../imgs/user.svg'\r\nimport AddContactImg from '../../../imgs/addContact.svg'\r\nimport logoutImg from '../../../imgs/logout.svg'\r\nimport CSS from 'csstype'\r\nimport {Link, useHistory} from 'react-router-dom'\r\n\r\nconst SidebarHeader = ({selectAddContactState: {selectAddContact, setSelectAddContact}}: props): JSX.Element => {\r\n\r\n\tconst redirectToAddContact = () => setSelectAddContact(!selectAddContact)\r\n\tconst history = useHistory()\r\n\tconst logOut = () => {\r\n\t\tlocalStorage.removeItem('token')\r\n\t\thistory.push('/auth')\r\n\t}\r\n\treturn (\r\n\t\t<div style={mainDivStyle}>\r\n\t\t\t<Link style={UserPhoto} to=\"/settings\"><img src={UserImg}></img></Link>\r\n\t\t\t<img style={addContact} src={AddContactImg} onClick={redirectToAddContact}></img>\r\n\t\t\t<img style={logout} src={logoutImg} onClick={logOut}></img>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst logout: CSS.Properties = {\r\n\theight: '40px',\r\n\twidth: '40px',\r\n\tmargin: '5px 5px',\r\n\talignItems: 'center',\r\n\tcursor: 'pointer'\r\n}\r\n\r\nconst addContact: CSS.Properties = {\r\n\theight: '40px',\r\n\twidth: '40px',\r\n\talignItems: 'center',\r\n\tcursor: 'pointer'\r\n}\r\n\r\nconst UserPhoto: CSS.Properties = {\r\n\tdisplay: 'flex',\r\n\tjustifyContent: 'center',\r\n\talignItems: 'center',\r\n\theight: '50px',\r\n\twidth: '50px',\r\n\tbackgroundColor:'white',\r\n\tborderRadius: '50%',\r\n\tmarginLeft: '5px'\r\n}\r\n\r\nconst mainDivStyle: CSS.Properties = {\r\n\tdisplay: 'grid',\r\n\talignItems: 'center',\r\n\tgridTemplateColumns: '9fr 0.3fr 0.3fr',\r\n\tbackgroundColor: '#548CA8',\r\n\tcolor: 'white',\r\n\tfontSize: '25px',\r\n\theight: '10%',\r\n}\r\n\r\ninterface props {\r\n\tselectAddContactState: {\r\n\t\tselectAddContact: boolean,\r\n\t\tsetSelectAddContact: React.Dispatch<React.SetStateAction<boolean>>\r\n\t}\r\n}\r\n\r\nexport default SidebarHeader","import User from '../../../interfaces/UserInterface'\r\nimport SidebarItem from './SidebarItem'\r\nimport CSS from 'csstype'\r\nimport SidebarHeader from './SidebarHeader'\r\nimport { useEffect } from 'react'\r\nimport { onMessageRecived } from '../../../services/socketClient'\r\nimport Message from '../../../interfaces/MessageInterface'\r\nconst Sidebar = ({ contactsInfo: {contacts, setContacts}, selectedChatState: {selectedContactInfo, setselectedContactInfo}, selectAddContactState: {selectAddContact, setSelectAddContact}}: SidebarProps): JSX.Element => {\r\n\t/*\r\n\tuseEffect(() => {\r\n\t\tconst reciveMessage = (message: Message) => {\r\n\t\t\tconst userIndex = contacts.findIndex(contact => contact.username === message.senderUsername)\r\n\t\t\tconst modifiedArray = [...contacts]\r\n\t\t\t!modifiedArray[userIndex].numberOfNewMessages ? modifiedArray[userIndex].numberOfNewMessages = 1 : modifiedArray[userIndex].numberOfNewMessages++\r\n\t\t\tsetContacts(modifiedArray)\r\n\t\t}\r\n\t\tonMessageRecived(reciveMessage)\r\n\t}, [])\r\n\t\r\n\t*/\r\n\treturn (\r\n\t\t<div style={sideBarWrapper}>\r\n\t\t\t<SidebarHeader selectAddContactState={{selectAddContact, setSelectAddContact}} />\r\n\t\t\t<div style={sideBarItems}>\r\n\t\t\t\t{contacts.map((contact, i) => {\r\n\t\t\t\t\treturn <SidebarItem key={i} info={contact} selectedChatState={{selectedContactInfo, setselectedContactInfo}}  />\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nconst sideBarWrapper: CSS.Properties = {\r\n\tdisplay: 'flex',\r\n\tflexDirection: 'column',\r\n\twidth: 'inherit',\r\n\tbackgroundColor: '#476072'\r\n}\r\n\r\nconst sideBarItems: CSS.Properties = {\r\n\toverflowY: 'scroll',\r\n\theight: '90%'\r\n}\r\n\r\ninterface SidebarProps {\r\n\tcontactsInfo: {\r\n\t\tcontacts: Array<User>,\r\n\t\tsetContacts: React.Dispatch<React.SetStateAction<Array<User>>>\r\n\t}\r\n\tselectedChatState : {\r\n\t\tselectedContactInfo: User,\r\n\t\tsetselectedContactInfo: React.Dispatch<React.SetStateAction<User>>\r\n\t},\r\n\tselectAddContactState: {\r\n\t\tselectAddContact: boolean,\r\n\t\tsetSelectAddContact: React.Dispatch<React.SetStateAction<boolean>>\r\n\t}\r\n}\r\n\r\n\r\nexport default Sidebar","import User from '../../../interfaces/UserInterface'\r\nimport CSS from 'csstype'\r\nimport UserImg from '../../../imgs/user.svg'\r\n\r\nconst ChatHeader = ({ selectedChatState: { selectedContactInfo, setselectedContactInfo } }: PropsInterface): JSX.Element => {\r\n\r\n\treturn (\r\n\t\t<div style={mainWrapperStyle}>\r\n\t\t\t<div style={UserPhoto}>\r\n\t\t\t\t<img src={UserImg}></img>\r\n\t\t\t</div>\r\n\t\t\t<div style={nameDivStyle}>{selectedContactInfo?.name}</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst nameDivStyle: CSS.Properties = {\r\n\ttextAlign: 'left'\r\n}\r\n\r\n\r\nconst UserPhoto: CSS.Properties = {\r\n\theight: '50px',\r\n\twidth: '50px',\r\n\tbackgroundColor: 'white',\r\n\tborderRadius: '50%',\r\n\tmarginLeft: '10px',\r\n}\r\n\r\nconst mainWrapperStyle: CSS.Properties = {\r\n\tdisplay: 'grid',\r\n\talignItems: 'center',\r\n\theight: '10%',\r\n\tgridTemplateRows: 'inherit',\r\n\tgridTemplateColumns: '75px auto',\r\n\tbackgroundColor: '#476072',\r\n\tcolor: 'white',\r\n\tfontSize: '25px',\r\n\ttextDecoration: 'none',\r\n}\r\n\r\n\r\ninterface PropsInterface {\r\n\tselectedChatState: {\r\n\t\tselectedContactInfo: User,\r\n\t\tsetselectedContactInfo: React.Dispatch<React.SetStateAction<User>>\r\n\t}\r\n}\r\n\r\nexport default ChatHeader","import CSS from 'csstype'\r\nimport { useEffect, useState } from 'react'\r\nimport Message from '../../../interfaces/MessageInterface'\r\nimport { onMessageRead } from '../../../services/socketClient'\r\nconst SentMessageBubble = ({ message, contactUsername}: PropsInterface): JSX.Element => {\r\n\tconst timeSent = new Date(message.timeSent)\r\n\tconst [messageMetadata, setMessageMetadata] = useState<{isRead: boolean, timeRead: Date}>({isRead: message.isRead, timeRead: new Date(message.timeRead)})\r\n\tuseEffect(() => {\r\n\t\t// if the message isn't read, listen on the socket to get the message read status\r\n\t\tif(!messageMetadata.isRead)\r\n\t\t\tonMessageRead((response: {username: string, messagesRead: boolean, timeRead: Date}) => {\r\n\t\t\t\tif(contactUsername === response.username)\r\n\t\t\t\t\tsetMessageMetadata({isRead: response.messagesRead, timeRead: new Date(response.timeRead)})\r\n\t\t\t})\r\n\t}, [])\r\n\t// beforeSpanStyle && afterSpanStyle are used to shape the message bubble, I could probably find a better way to do it but I can't bother myself with this...\r\n\treturn (\r\n\t\t<div style={sentMessageStyle} >\r\n\t\t\t<span style={beforeSpanStyle}></span>\r\n\t\t\t<p>{message.text}</p>\r\n\t\t\t<div style={messageMetaDataStyle}>\r\n\t\t\t\t<p title={messageMetadata.isRead? `${messageMetadata.timeRead.getFullYear()}\\\\${messageMetadata.timeRead.getMonth()+1}\\\\${messageMetadata.timeRead.getUTCDate()}  ${messageMetadata.timeRead.getHours()}:${messageMetadata.timeRead.getMinutes()}` : ''} style={messageReadStatus}>{messageMetadata.isRead ? '✅' : '☑️'}</p>\r\n\t\t\t\t<p>{timeSent.getFullYear()}\\{timeSent.getMonth()+1}\\{timeSent.getUTCDate()}  {timeSent.getHours() % 12}:{timeSent.getMinutes()}</p>\r\n\t\t\t</div>\r\n\t\t\t<span style={afterSpanStyle}></span>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nconst messageMetaDataStyle : CSS.Properties = {\r\n\tdisplay: 'flex',\r\n\tjustifyContent: 'space-between',\r\n\talignItems: 'center',\r\n\tmargin: '0px 10px',\r\n\tfontSize: '10px',\r\n}\r\n\r\nconst messageReadStatus : CSS.Properties = {\r\n\tfontSize: '15px'\r\n}\r\n\r\n\r\n\r\n\r\nconst beforeSpanStyle: CSS.Properties = {\r\n\t'borderBottomLeftRadius': '0.8rem 0.7rem',\r\n\t'borderRight': '1rem solid #248bf5',\r\n\t'right': '-0.35rem',\r\n\t'transform': 'translate(0, -0.1rem)',\r\n\t'bottom': '-0.1rem',\r\n\t'content': '\\'\\'',\r\n\t'height': '1rem',\r\n\t'position': 'absolute'\r\n}\r\n\r\nconst afterSpanStyle: CSS.Properties = {\r\n\t'backgroundColor': '#334257',\r\n\t'borderBottomLeftRadius': '0.5rem',\r\n\t'right': '-40px',\r\n\t'transform': 'translate(-30px, -2px)',\r\n\t'width': '10px',\r\n\t'bottom': '-0.1rem',\r\n\t'content': '\\'\\'',\r\n\t'height': '1rem',\r\n\t'position': 'absolute'\r\n}\r\n\r\n\r\nconst sentMessageStyle: CSS.Properties = {\r\n\tmargin: '40px',\r\n\tdisplay: 'inline-block',\r\n\tposition: 'relative',\r\n\talignSelf: 'flex-end',\r\n\twidth: '200px',\r\n\theight: 'auto',\r\n\tbackgroundColor: '#248bf5',\r\n\tborderRadius: '10px',\r\n\twordWrap: 'break-word',\r\n}\r\n\r\ninterface PropsInterface {\r\n\tmessage: Message,\r\n\tcontactUsername: string,\r\n}\r\n\r\n\r\nexport default SentMessageBubble","import CSS from 'csstype'\r\nimport Message from '../../../interfaces/MessageInterface'\r\nconst RecivedMessageBubble = ({ message}: PropsInterface) => {\r\n\treturn (\r\n\t\t<div style={recivedMessageStyle}>\r\n\t\t\t<span style={recivedBeforeStyle}></span>\r\n\t\t\t<p>{message.text}</p>\r\n\t\t\t<span style={recivedAfterStyle}></span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst recivedMessageStyle: CSS.Properties = {\r\n\tmargin: '40px',\r\n\tdisplay: 'inline-block',\r\n\tposition: 'relative',\r\n\talignSelf: 'flex-start',\r\n\twidth: '200px',\r\n\theight: 'auto',\r\n\tbackgroundColor: '#e5e5ea',\r\n\tborderRadius: '10px',\r\n\twordWrap: 'break-word',\r\n\tcolor: 'black'\r\n}\r\n\r\nconst recivedBeforeStyle: CSS.Properties = {\r\n\t'borderBottomRightRadius': '0.8rem 0.7rem',\r\n\t'borderLeft': '1rem solid #e5e5ea',\r\n\t'left': '-0.35rem',\r\n\t'transform': 'translate(0, -0.1rem)',\r\n\t'bottom': '-0.1rem',\r\n\t'content': '\\'\\'',\r\n\t'height': '1rem',\r\n\t'position': 'absolute'\r\n}\r\n\r\nconst recivedAfterStyle: CSS.Properties = {\r\n\t'backgroundColor': '#334257',\r\n\t'borderBottomRightRadius': '0.5rem',\r\n\t'left': '20px',\r\n\t'transform': 'translate(-30px, -2px)',\r\n\t'width': '10px',\r\n\t'bottom': '-0.1rem',\r\n\t'content': '\\'\\'',\r\n\t'height': '1rem',\r\n\t'position': 'absolute'\r\n}\r\n\r\n\r\ninterface PropsInterface {\r\n\tmessage: Message\r\n}\r\n\r\nexport default RecivedMessageBubble","import Chat from '../../../interfaces/ChatInterface'\r\nimport CSS from 'csstype'\r\nimport User from '../../../interfaces/UserInterface'\r\nimport SentMessageBubble from './SentMessageBubble'\r\nimport RecivedMessageBubble from './RecivedMessageBubble'\r\nimport { useEffect } from 'react'\r\nconst ChatBody = ({chat, selectedChatState:{selectedContactInfo, setselectedContactInfo}}: PropsInterface): JSX.Element => {\r\n\r\n\tuseEffect(() => {\r\n\t\tconst element = document.getElementById('mainWrapper')\r\n\t\telement?.scrollTo({behavior: 'smooth',top: element.scrollHeight})\r\n\t})\r\n\treturn (\r\n\t\t<div id=\"mainWrapper\" style={mainWrapperStyle}>\r\n\t\t\t{chat.Messages.map((msg, key) => {\r\n\t\t\t\treturn msg.senderUsername !== selectedContactInfo.username ? \r\n\t\t\t\t\t<SentMessageBubble key={key} message={msg} contactUsername={selectedContactInfo.username}/>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<RecivedMessageBubble key={key} message={msg}/>\r\n\t\t\t})}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mainWrapperStyle: CSS.Properties = {\r\n\tdisplay: 'flex',\r\n\tflexDirection: 'column',\r\n\theight: '80%',\r\n\toverflowY: 'scroll',\r\n}\r\n\r\n\r\ninterface PropsInterface {\r\n\tchat: Chat,\r\n\tselectedChatState: {\r\n\t\tselectedContactInfo: User,\r\n\t\tsetselectedContactInfo: React.Dispatch<React.SetStateAction<User>>\r\n\t}\r\n}\r\n\r\nexport default ChatBody","export default __webpack_public_path__ + \"static/media/sendChatButton.0be4f0b5.svg\";","import CSS from 'csstype'\r\nimport { useEffect } from 'react'\r\nimport SendButton from '../../../imgs/sendChatButton.svg'\r\nimport User from '../../../interfaces/UserInterface'\r\nimport {sendMessage} from '../../../services/socketClient'\r\nconst ChatBox = ({selectedChatState: {selectedContactInfo, setselectedContactInfo}, textInputState: {textInput, setTextInput}}: ChatboxProps) => {\r\n\r\n\tconst sendChat = () => {\r\n\t\tsendMessage(textInput, selectedContactInfo.username)\r\n\t}\r\n\r\n\tconst changeTextInputState = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n\t\tconst text = event.target.value\r\n\t\tsetTextInput(text)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style={mainWrapperStyle}>\r\n\t\t\t<img style={sendButtonStyle} src={SendButton} onClick={sendChat}></img>\r\n\t\t\t<textarea id=\"textField\" onChange={changeTextInputState} style={inputBoxStyle} rows={2}></textarea>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst sendButtonStyle: CSS.Properties = {\r\n\twidth: '35px',\r\n\theight: '35px',\r\n\tjustifySelf: 'center',\r\n\tcursor: 'pointer'\r\n}\r\n\r\n\r\nconst mainWrapperStyle: CSS.Properties = {\r\n\tdisplay: 'flex',\r\n\tflexDirection: 'row',\r\n\theight: '10%',\r\n\twidth: 'inherit',\r\n\talignItems: 'center',\r\n\tjustifyContent: 'flex-end',\r\n\tbackgroundColor: '#548CA8'\r\n}\r\n\r\nconst inputBoxStyle: CSS.Properties = {\r\n\twidth: '96%',\r\n\tappearance: 'none',\r\n\tmargin: '0px 10px',\r\n\tpadding: '0px 0px',\r\n\tjustifySelf: 'center',\r\n\tresize: 'none',\r\n\tfontSize: '20px',\r\n\tborder: '0px solid',\r\n\tborderRadius: '15px'\r\n}\r\n\r\ninterface ChatboxProps{\r\n\tselectedChatState : {\r\n\t\tselectedContactInfo: User,\r\n\t\tsetselectedContactInfo: React.Dispatch<React.SetStateAction<User>>\r\n\t}\r\n\ttextInputState : {\r\n\t\ttextInput: string,\r\n\t\tsetTextInput: React.Dispatch<React.SetStateAction<string>>\r\n\t}\r\n}\r\n\r\n\r\nexport default ChatBox","import CSS from 'csstype'\r\nimport ChatInterface from '../../../interfaces/ChatInterface'\r\nimport User from '../../../interfaces/UserInterface'\r\nimport ChatHeader from './ChatHeader'\r\nimport ChatBody from './ChatBody'\r\nimport ChatBox from './ChatBox'\r\nimport { useEffect, useState } from 'react'\r\nimport { checkIfMessageWasSent, onMessageRecived } from '../../../services/socketClient'\r\nimport Message from '../../../interfaces/MessageInterface'\r\n\r\n\r\nconst Chat = ({ chatState: { chats, setChats }, selectedChatState: { selectedContactInfo, setselectedContactInfo } }: chatProps): JSX.Element => {\r\n\r\n\tconst [textInput, setTextInput] = useState('')\r\n\t\r\n\tuseEffect(() => {\r\n\t\tconst sendChat = (recivedMessage: Message) => {\r\n\t\t\tconst user = recivedMessage.reciverUsername\r\n\t\t\tconst index = findUserChatsIndex(user)\r\n\t\t\tconst modifiedArray = [...chats]\r\n\t\t\tmodifiedArray[index].Messages.push(recivedMessage)\r\n\t\t\tsetChats(modifiedArray)\r\n\t\t}\r\n\r\n\t\tconst reciveMessage = (recivedMessage: Message) => {\r\n\t\t\tconst user = recivedMessage.senderUsername\r\n\t\t\tconst index = findUserChatsIndex(user)\r\n\t\t\tconst modifiedArray = [...chats]\r\n\t\t\tmodifiedArray[index].Messages.push(recivedMessage)\r\n\t\t\tsetChats(modifiedArray)\r\n\t\t}\r\n\t\tcheckIfMessageWasSent(sendChat)\r\n\t\tonMessageRecived(reciveMessage)\r\n\t}, [])\r\n\t\r\n\tconst findUserChats = (): ChatInterface => {\r\n\t\tif (chats) {\r\n\t\t\tconst length = chats.length\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tif (chats[i].username === selectedContactInfo?.username)\r\n\t\t\t\t\treturn chats[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { 'username': selectedContactInfo!.username, Messages: [] }\r\n\t}\r\n\r\n\tconst findUserChatsIndex = (username: string) => {\r\n\t\tif (chats) {\r\n\t\t\tconst length = chats.length\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tif (chats[i].username === username)\r\n\t\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst modifiedArray = [...chats]\r\n\t\tmodifiedArray.push({ 'username': selectedContactInfo.username, Messages: [] })\r\n\t\tsetChats(modifiedArray)\r\n\t\treturn modifiedArray.length -1\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div style={chatStyle}>\r\n\t\t\t<ChatHeader selectedChatState={{ selectedContactInfo, setselectedContactInfo }} />\r\n\t\t\t<ChatBody chat={findUserChats()} selectedChatState={{ selectedContactInfo, setselectedContactInfo }} />\r\n\t\t\t<ChatBox selectedChatState={{ selectedContactInfo, setselectedContactInfo }} textInputState={{ textInput, setTextInput }} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst chatStyle: CSS.Properties = {\r\n\tbackgroundColor: '#334257',\r\n\theight: '100%',\r\n\twidth: '100%',\r\n\tcolor: 'white',\r\n}\r\n\r\n\r\ninterface chatProps {\r\n\tchatState: {\r\n\t\tchats: Array<ChatInterface>,\r\n\t\tsetChats: React.Dispatch<React.SetStateAction<ChatInterface[]>>\r\n\t},\r\n\tselectedChatState: {\r\n\t\tselectedContactInfo: User,\r\n\t\tsetselectedContactInfo: React.Dispatch<React.SetStateAction<User>>\r\n\t}\r\n}\r\n\r\nexport default Chat\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = `${process.env.PUBLIC_URL}`\r\nconst signInRequest = async (username: string, password: string): Promise<number> => {\r\n\ttry{\r\n\t\tconst response = await axios.post(`${baseUrl}/login`, {username, password})\r\n\t\tif(response.status === 200){\r\n\t\t\tlocalStorage.setItem('token', response.data.token)\r\n\t\t\treturn response.status\r\n\t\t}\r\n\t\treturn 401\r\n\t}\r\n\tcatch(error){\r\n\t\treturn 401\r\n\t}\r\n}\r\n\r\nconst signUpRequest = async (name: string, email: string, username: string, password: string): Promise<number> => {\r\n\ttry{\r\n\t\tconst response = await axios.post(`${baseUrl}/api/users/newUser`, {name, email, username, password})\r\n\t\tif(response.status === 201)\r\n\t\t\treturn 201\r\n\t\treturn 400\r\n\t}\r\n\tcatch(error){\r\n\t\treturn 400\r\n\t}\r\n}\r\n\r\nconst checkIfEmailIsAvaliable = async (email: string) => {\r\n\ttry{\r\n\t\tconst response = await axios.get(`${baseUrl}/api/users/checkIfEmailAvaliable/${email}`)\r\n\t\tif(response.status === 200)\r\n\t\t\treturn 200\r\n\t\treturn 403\r\n\t}\r\n\tcatch(error){\r\n\t\treturn 400\r\n\t}\r\n}\r\n\r\n\r\nconst checkIfUsernameIsAvaliable = async (username: string) => {\r\n\ttry{\r\n\t\tconst response = await axios.get(`${baseUrl}/api/users/checkIfUsernameAvaliable/${username}`)\r\n\t\tif(response.status === 200)\r\n\t\t\treturn 200\r\n\t}\r\n\tcatch(error){\r\n\t\treturn 403\r\n\t}\r\n}\r\n\r\nconst addNewContact = async (contactUsername: string) => {\r\n\ttry{\r\n\t\tconst token = localStorage.getItem('token')\r\n\t\tconst response = await axios.put(`${baseUrl}/api/users/addContact/${contactUsername}`,{}, {headers: { 'Authorization': `Bearer ${token}` }}, )\r\n\t\tif(response.status === 200)\r\n\t\t\treturn 200\r\n\t\treturn 400\r\n\t}\r\n\tcatch(error){\r\n\t\treturn 400\r\n\t}\r\n}\r\n\r\nconst getUserChats = async () => {\r\n\ttry{\r\n\t\tconst token = localStorage.getItem('token')\r\n\t\tconst response = await axios.get(`${baseUrl}/api/users/getChats`, {headers: { 'Authorization': `Bearer ${token}` }})\r\n\t\tif(response.status === 200)\r\n\t\t\treturn response.data\r\n\t}\r\n\tcatch(error){\r\n\t\treturn error\r\n\t}\r\n}\r\n\r\n\r\nconst getUserContacts = async () => {\r\n\ttry{\r\n\t\tconst token = localStorage.getItem('token')\r\n\t\tconst response = await axios.get(`${baseUrl}/api/users/getContacts`,{headers: { 'Authorization': `Bearer ${token}` }})\r\n\t\tif(response.status === 200)\r\n\t\t\treturn response.data\r\n\t}\r\n\tcatch(error){\r\n\t\treturn error\r\n\t}\r\n}\r\n\r\nconst markChatsRead = async (contactUsername: string) => {\r\n\ttry{\r\n\t\tconst token = localStorage.getItem('token')\r\n\t\tconst response = await axios.put(`${baseUrl}/api/chats/markRead/${contactUsername}`,{} ,{headers: { 'Authorization': `Bearer ${token}` }} )\r\n\t\treturn response.status\r\n\t}\r\n\tcatch(error){\r\n\t\treturn error\r\n\t}\r\n}\r\n\r\nconst isJwtTokenValid = async () : Promise<boolean> => {\r\n\ttry{\r\n\t\tconst response = await axios.get(`${baseUrl}/login/validateToken/`, {headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }})\r\n\t\tif(response.status === 200)\r\n\t\t\treturn true\r\n\t\treturn false\r\n\t}\r\n\tcatch(error){\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\n\r\nexport {\r\n\tsignInRequest,\r\n\tsignUpRequest,\r\n\tcheckIfUsernameIsAvaliable,\r\n\tcheckIfEmailIsAvaliable,\r\n\taddNewContact,\r\n\tgetUserChats,\r\n\tgetUserContacts,\r\n\tisJwtTokenValid,\r\n\tmarkChatsRead\r\n}","import CSS from 'csstype'\r\nimport { useState } from 'react'\r\nimport Loader from 'react-loader-spinner'\r\nimport { addNewContact } from '../../services/server'\r\n\r\nconst AddContactForm = (): JSX.Element => {\r\n\r\n\tconst [isLoading, setIsLoading] = useState(Boolean)\r\n\tconst [responseMessage, setResponseMessage] = useState('')\r\n\tconst sendNewContactRequest = async (event : React.FormEvent<HTMLFormElement>) => {\r\n\t\tevent.preventDefault()\r\n\t\tsetIsLoading(true)\r\n\t\tconst formData = new FormData(event.currentTarget)\r\n\t\tconst response = await addNewContact(String(formData.get('Username')))\r\n\t\tif (response === 200) {\r\n\t\t\tsetResponseMessage('The user have been added to your contacts!')\r\n\t\t}\r\n\t\telse{\r\n\t\t\tsetResponseMessage(String(response))\r\n\t\t}\r\n\t\tsetIsLoading(false)\r\n\t}\r\n\r\n\tif(isLoading)\r\n\t\treturn <Loader type=\"Circles\" color=\"#00BFFF\" height={80} width={80} />\r\n\r\n\treturn (\r\n\t\t<form style={mainWrapperStyle} onSubmit={sendNewContactRequest}>\r\n\t\t\t<p>Add contact</p>\r\n\t\t\t<input className=\"SignInFormInput\" required name=\"Username\" placeholder=\"Username\" type=\"text\" />\r\n\t\t\t<input className=\"authButton\" type=\"submit\" value=\"Add\" />\r\n\t\t\t<p>{responseMessage !== '' ? responseMessage: null}</p>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst mainWrapperStyle: CSS.Properties = {\r\n\theight: '750px',\r\n\twidth: '500px',\r\n\tdisplay: 'flex',\r\n\tflexDirection: 'column',\r\n\tjustifyContent: 'flex-start',\r\n\talignItems: 'center',\r\n\tbackgroundColor: '#5D8AAB',\r\n\tborderRadius: '15px',\r\n\tfontSize: '50px',\r\n\tcolor: 'white',\r\n\tmarginTop: '50px'\r\n\r\n}\r\n\r\n/*\r\n\theight: 800px;\r\n\twidth: 500px;\r\n\tflexDirection: 'column',\r\n\tjustifyContent: 'center',\r\n\talignItems: 'center',\r\n\tbackgroundColor: '#5D8AAB',\r\n\tborderRadius: '15px',\r\n*/\r\n\r\nexport default AddContactForm","export default __webpack_public_path__ + \"static/media/HomeIcon.318a1c89.svg\";","import UserImg from '../../imgs/user.svg'\r\nimport AddContactImg from '../../imgs/addContact.svg'\r\nimport CSS from 'csstype'\r\nimport {Link} from 'react-router-dom'\r\nimport HomeIcon from '../../imgs/HomeIcon.svg'\r\n\r\nconst AddContactHeader = ({selectAddContactState: {selectAddContact, setSelectAddContact}}: props): JSX.Element => {\r\n\tconst redirectToMain = () => setSelectAddContact(!selectAddContact)\r\n\treturn (\r\n\t\t<div style={mainDivStyle}>\r\n\t\t\t<Link style={UserPhoto} to=\"/settings\"><img src={UserImg}></img></Link>\r\n\t\t\t<img style={addContact} src={HomeIcon} onClick={redirectToMain}></img>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst addContact: CSS.Properties = {\r\n\theight: '40px',\r\n\twidth: '40px',\r\n\talignItems: 'center',\r\n\tcursor: 'pointer'\r\n}\r\n\r\nconst UserPhoto: CSS.Properties = {\r\n\tdisplay: 'flex',\r\n\tjustifyContent: 'center',\r\n\talignItems: 'center',\r\n\theight: '50px',\r\n\twidth: '50px',\r\n\tbackgroundColor:'white',\r\n\tborderRadius: '50%',\r\n\tmarginLeft: '5px'\r\n}\r\n\r\nconst mainDivStyle: CSS.Properties = {\r\n\tdisplay: 'grid',\r\n\talignItems: 'center',\r\n\tgridTemplateColumns: '9fr 0.3fr',\r\n\tbackgroundColor: '#548CA8',\r\n\tcolor: 'white',\r\n\tfontSize: '25px',\r\n\theight: '10%',\r\n\twidth: '100%',\r\n}\r\n\r\ninterface props {\r\n\tselectAddContactState: {\r\n\t\tselectAddContact: boolean,\r\n\t\tsetSelectAddContact: React.Dispatch<React.SetStateAction<boolean>>\r\n\t}\r\n}\r\nexport default AddContactHeader","import CSS from 'csstype'\r\nimport AddContactForm from './AddContactForm'\r\nimport AddContactHeader from './AddContactHeader'\r\n\r\nconst AddContacts = ({selectAddContactState: {selectAddContact, setSelectAddContact}}: props): JSX.Element => {\r\n\treturn (\r\n\t\t<div style={mainWrapper}>\r\n\t\t\t<AddContactHeader selectAddContactState={{selectAddContact, setSelectAddContact}} />\r\n\t\t\t<AddContactForm />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nconst mainWrapper: CSS.Properties = {\r\n\tcolor: 'white',\r\n\tdisplay: 'flex',\r\n\tflexDirection: 'column',\r\n\tbackgroundColor: '#334257',\r\n\talignItems: 'center',\r\n\ttextAlign: 'center',\r\n\twidth: '100%',\r\n\theight: '100%'\r\n}\r\n\r\ninterface props {\r\n\tselectAddContactState: {\r\n\t\tselectAddContact: boolean,\r\n\t\tsetSelectAddContact: React.Dispatch<React.SetStateAction<boolean>>\r\n\t}\r\n}\r\n\r\nexport default AddContacts","import { Redirect } from 'react-router-dom'\r\nimport Sidebar from './Sidebar/Sidebar'\r\nimport CSS from 'csstype'\r\nimport { useEffect, useState } from 'react'\r\nimport Chat from './Chat/Chat'\r\nimport ChatInterface from '../../interfaces/ChatInterface'\r\nimport UserInterface from '../../interfaces/UserInterface'\r\nimport SidebarHeader from './Sidebar/SidebarHeader'\r\nimport { getUserChats, getUserContacts, isJwtTokenValid } from '../../services/server'\r\nimport { disconnectSocket, initiateSocket } from '../../services/socketClient'\r\nimport AddContacts from '../AddContacts/AddContacts'\r\n\r\nconst Main = (): JSX.Element => {\r\n\tconst [selectedContactInfo, setselectedContactInfo] = useState<UserInterface>({ name: 'default', username: 'default', lastOnline: new Date(), numberOfNewMessages: 0 })\r\n\tconst [contacts, setContacts] = useState<Array<UserInterface>>([])\r\n\tconst [chats, setChats] = useState<Array<ChatInterface>>([])\r\n\tconst [selectAddContact, setSelectAddContact] = useState(Boolean)\r\n\tuseEffect(() => {\r\n\t\tconst getDataFromServer = async () => {\r\n\t\t\tconst getContacts = await getUserContacts()\r\n\t\t\tsetContacts(getContacts)\r\n\t\t\tconst getChats = await getUserChats()\r\n\t\t\tsetChats(getChats)\r\n\t\t}\r\n\t\tconst jwtTokenIsValid = async () => {\r\n\t\t\tconst validateToken = await isJwtTokenValid()\r\n\t\t\tif (!validateToken) {\r\n\t\t\t\tlocalStorage.removeItem('token')\r\n\t\t\t\tdisconnectSocket()\r\n\t\t\t}\r\n\t\t\treturn validateToken\r\n\t\t}\r\n\t\tif (jwtTokenIsValid() && contacts.length == 0) {\r\n\t\t\tgetDataFromServer()\r\n\t\t\tinitiateSocket()\r\n\t\t}\r\n\t\t\r\n\r\n\t}, [])\r\n\r\n\tif (selectAddContact)\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<AddContacts selectAddContactState={{ selectAddContact, setSelectAddContact }} />\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\r\n\tif (!localStorage.getItem('token'))\r\n\t\treturn (<Redirect to='/Auth' />)\r\n\r\n\tif (contacts.length == 0)\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<SidebarHeader selectAddContactState={{ selectAddContact, setSelectAddContact }} />\r\n\t\t\t\t<div style={mainDivNoContactsStyle}>\r\n\t\t\t\t\tAdd contacts through the button on top😊👋\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\r\n\tif (selectedContactInfo.name !== 'default')\r\n\t\treturn (\r\n\t\t\t<div style={mainWrapperWithChatStyle}>\r\n\t\t\t\t<Sidebar contactsInfo={{ contacts, setContacts }} selectedChatState={{ selectedContactInfo, setselectedContactInfo }} selectAddContactState={{ selectAddContact, setSelectAddContact }} />\r\n\t\t\t\t<Chat chatState={{ chats, setChats }} selectedChatState={{ selectedContactInfo, setselectedContactInfo }} />\r\n\t\t\t</div>\r\n\r\n\t\t)\r\n\r\n\r\n\treturn (\r\n\t\t<div style={mainWrapperStyle}>\r\n\t\t\t<Sidebar contactsInfo={{ contacts, setContacts }} selectedChatState={{ selectedContactInfo, setselectedContactInfo }} selectAddContactState={{ selectAddContact, setSelectAddContact }} />\r\n\t\t\t<div style={mainDivNoChatStyle}>\r\n\t\t\t\tSay hi to your friends 😊👋\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mainDivNoChatStyle: CSS.Properties = {\r\n\tcolor: 'white',\r\n\tbackgroundColor: '#334257',\r\n\tdisplay: 'flex',\r\n\talignItems: 'center',\r\n\tjustifyContent: 'center',\r\n\ttextAlign: 'center',\r\n\twidth: '100%',\r\n\tfontSize: '70px',\r\n\theight: '100%'\r\n}\r\n\r\nconst mainDivNoContactsStyle: CSS.Properties = {\r\n\tcolor: 'white',\r\n\tbackgroundColor: '#334257',\r\n\tdisplay: 'flex',\r\n\talignItems: 'center',\r\n\tjustifyContent: 'center',\r\n\ttextAlign: 'center',\r\n\twidth: '100%',\r\n\tfontSize: '70px',\r\n\theight: '90%'\r\n}\r\n\r\n\r\nconst mainWrapperStyle: CSS.Properties = {\r\n\tdisplay: 'grid',\r\n\tgridTemplateRows: '100% 50px',\r\n\tgridTemplateColumns: '20% 80%'\r\n}\r\n\r\nconst mainWrapperWithChatStyle: CSS.Properties = {\r\n\tdisplay: 'grid',\r\n\tgridTemplateRows: '100% 50px',\r\n\tgridTemplateColumns: '20% 80%'\r\n}\r\nexport default Main","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { signInRequest } from '../../../services/server'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nfunction SignInForm() {\r\n\tconst token = localStorage.getItem('token')\r\n\tconst [isLoading, setIsLoading] = useState(Boolean)\r\n\tconst [error, setError] = useState('')\r\n\r\n\r\n\tconst sendAuthRequest = async (event: React.FormEvent<HTMLFormElement>) => {\r\n\t\tsetIsLoading(true)\r\n\t\tevent.preventDefault()\r\n\t\tconst formData = new FormData(event.currentTarget)\r\n\t\tconst response = await signInRequest(String(formData.get('Username')), String(formData.get('Password')))\r\n\t\tsetIsLoading(false)\r\n\t}\r\n\r\n\tif (isLoading)\r\n\t\treturn <Loader type=\"Circles\" color=\"#00BFFF\" height={80} width={80} />\r\n\r\n\r\n\treturn (\r\n\t\t<div id=\"SignInFormDiv\">\r\n\t\t\t<form onSubmit={sendAuthRequest} >\r\n\t\t\t\t{error !== '' ? <h3 style={{ color: 'red' }}>{error}</h3> : null}\r\n\t\t\t\t{token ? <Redirect to='/' /> : null}\r\n\t\t\t\t<p>Welcome back!</p>\r\n\t\t\t\t<input className=\"SignInFormInput\"  required name=\"Username\" placeholder=\"Username\" type=\"text\" />\r\n\t\t\t\t<input className=\"SignInFormInput\" placeholder=\"Password\" required name=\"Password\" type=\"password\" />\r\n\t\t\t\t<input className=\"authButton\" type=\"submit\" value=\"Sign in\" />\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SignInForm","import './SignIn.css'\r\nimport SignInForm from './SignInForm'\r\n\r\nconst SignIn = (): JSX.Element => {\r\n\treturn(\r\n\t\t<div id=\"SignInDiv\">\r\n\t\t\t{<SignInForm />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SignIn","import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { checkIfEmailIsAvaliable, checkIfUsernameIsAvaliable, signUpRequest } from '../../../services/server'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nfunction SignUpForm() {\r\n\tconst [isLoading, setIsLoading] = useState(Boolean)\r\n\tconst [isRegisterd, setIsRegisterd] = useState(Boolean)\r\n\tconst [error, setError] = useState('')\r\n\r\n\r\n\tconst sendAuthRequest = async (event: React.FormEvent<HTMLFormElement>) => {\r\n\t\tsetIsLoading(true)\r\n\t\tevent.preventDefault()\r\n\t\tconst formData = new FormData(event.currentTarget)\r\n\t\tconst response = await signUpRequest(String(formData.get('Name')), String(formData.get('Email')), String(formData.get('Username')), String(formData.get('Password')))\r\n\t\tif(response === 201)\r\n\t\t\tsetIsRegisterd(true)\r\n\r\n\t\tresponse === 400 ? setError('Your username / password doesn\\'t meet the requirements') : setError(`Something is wrong on our part, sorry for the inconvenience\\n error code ${response}`)\r\n\t\tsetIsLoading(false)\r\n\t}\r\n\r\n\tconst checkUsername = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst username = event.target.value\r\n\t\tif(username.length < 1){\r\n\t\t\tevent.target.style.backgroundColor = 'white'\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst response = await checkIfUsernameIsAvaliable(username)\r\n\t\tif(response === 200)\r\n\t\t\tevent.target.style.backgroundColor = 'green'\r\n\t\telse{\r\n\t\t\tevent.target.style.backgroundColor = 'red'\r\n\t\t}\r\n\t}\r\n\r\n\tconst checkEmail = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst email = event.target.value\r\n\t\tif(email.length < 1){\r\n\t\t\tevent.target.style.backgroundColor = 'white'\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst response = await checkIfEmailIsAvaliable(email)\r\n\t\tif(response === 200)\r\n\t\t\tevent.target.style.backgroundColor = 'green'\r\n\t\telse{\r\n\t\t\tevent.target.style.backgroundColor = 'red'\r\n\t\t}\r\n\t}\r\n\r\n\tconst checkPassword = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst password = event.target.value\r\n\t\tif(password.length < 1){\r\n\t\t\tevent.target.style.backgroundColor = 'white'\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif(password.length > 6){\r\n\t\t\tevent.target.style.backgroundColor = 'green'\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif(password.length < 6){\r\n\t\t\tevent.target.style.backgroundColor = 'red'\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tif (isLoading)\r\n\t\treturn <Loader type=\"Circles\" color=\"#00BFFF\" height={80} width={80} />\r\n\r\n\r\n\treturn (\r\n\t\t<div id=\"SignInFormDiv\">\r\n\t\t\t<form onSubmit={sendAuthRequest} >\r\n\t\t\t\t{error !== '' ? <h3 style={{ color: 'red' }}>{error}</h3> : null}\t\r\n\t\t\t\t{isRegisterd ? <Redirect to='/Auth/SignIn' /> : null}\r\n\t\t\t\t<p>Join us!</p>\r\n\t\t\t\t<input className=\"SignInFormInput\" required name=\"Name\" placeholder=\"Full name\" type=\"text\" />\r\n\t\t\t\t<input className=\"SignInFormInput\" onChange={checkEmail} required name=\"Email\" placeholder=\"Email address\" type=\"email\" />\r\n\t\t\t\t<input className=\"SignInFormInput\" onChange={checkUsername} required name=\"Username\" placeholder=\"Username\" type=\"text\" />\r\n\t\t\t\t<input className=\"SignInFormInput\" onChange={checkPassword} required placeholder=\"Password\" name=\"Password\" type=\"password\" />\r\n\t\t\t\t<input className=\"authButton\" type=\"submit\" value=\"Sign up\" />\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SignUpForm","import SignUpForm from './SignUpForm'\r\n\r\nconst SignUp = (): JSX.Element => {\r\n\treturn(\r\n\t\t<div id=\"SignInDiv\">\r\n\t\t\t{<SignUpForm />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default SignUp","import React from 'react'\r\nimport { RouteProps, Route, Redirect, RouteComponentProps } from 'react-router-dom'\r\n\r\ntype PrivateRouteProps = {\r\n\tpath: RouteProps['path'];\r\n\tcomponent: React.ElementType;\r\n\trender?: (props: RouteComponentProps<any>) => React.ReactNode;\r\n\texact?: boolean;\r\n}\r\nconst PrivateRoute: React.FunctionComponent<PrivateRouteProps> = ({\r\n\tcomponent: Component,\r\n\t...routeProps\r\n}) => {\r\n\treturn (\r\n\t\t<Route\r\n\t\t\t{...routeProps}\r\n\t\t\trender={(props) =>\r\n\t\t\t\tlocalStorage.getItem('token') ? <Component /> : <Redirect to='/Auth' />\r\n\t\t\t}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nexport default PrivateRoute","import './App.css'\r\nimport Auth from './components/Auth/Auth'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { useState } from 'react'\r\nimport Main from './components/Main/Main'\r\nimport SignIn from './components/Auth/SignIn/SignIn'\r\nimport SignUp from './components/Auth/SignUp/SignUp'\r\nimport dotenv from 'dotenv'\r\nimport ProtectedRoute from './components/ProtectedRoute'\r\nimport {useEffect} from 'react'\r\nconst App = (): JSX.Element => {\r\n\tuseEffect(() => {\r\n\t\tdocument.title = 'Not a WhatsApp clone :P'\r\n\t}, [])\r\n\tdotenv.config()\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<ProtectedRoute path='/' exact component={Main}/>\r\n\t\t\t\t<Route path='/Auth' exact component={Auth} />\r\n\t\t\t\t<Route path='/Auth/Signin' exact render={ () => <SignIn/> }/>\r\n\t\t\t\t<Route path='/Auth/Signup' exact render={ () => <SignUp />} />\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t)\r\n}\r\n\r\n\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\n\r\nReactDOM.render(\r\n\t\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}